{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww37900\viewh21300\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # 323 Number of Connected Components in an undirected graph\
\
Problem Description:\
Given that:\
1. An integer \'93n\'94, representing n nodes, numbered from 0 to n-1.\
2. An array \'93edges\'94, where edges[i] = [a, b] represents an edge between nodes a and b.\
\
Your task:\
 Return the number of connected components in the graph.\
\
Input:\
n = 5\
edges = [[0, 1], [1, 2], [3, 4]]\
\
Output:\
2\
\
Input:\
n = 4\
edges = [[0, 1], [2, 3]]\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tqr\tx13001\pardirnatural\partightenfactor0
\cf0 Output:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 2\
\
Using DFS:\
\
\
class Solution:\
    Def countComponents(self, n: int, edges: List[List[int]]) -> int:\
	# Step 1: Build the adjacency list\
	graph = \{ I: [] for I in range (n)\}\
	for a, b in edges:\
	    graph[a].append(b)\
	    graph[b].append(a)\
	\
	# Step 2: Initialize visited set and components counter\
	visited = set()\
	num_components = 0\
	\
	# Step 3: Define DFS function\
	def dfs(Node):\
	    visited.add(node)\
	    for neighbor in graph[node]:\
		if neighbor not in visited:\
	 	    dfs(neighbor)\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 	# Step 4: Traverse all nodes\

\f0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 	for node in range(n):\
	    if node not in visited:\
		num_components += 1 # Start a new component\
		dfs(node)\
\
	return num_components\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Using Union-Find (Disjoint Set Union)\
\
Class Solution:\
	def countComponents(self, n: int, edges: List[List[int]]) _> int:\
		# Step 1: Initialize parent and rank arrays\
		parent = [i for I in range(n)]\
		rank = [0] * n\
		\
		# Step 2: Define Find function with path compression\
		def find(node):\
			if parent[node] != node:\
				parent[node] = find(parent[node]) # Path compression\
			return parent[node]\
\
		# Step 3: Define Union function by rank\
		def union(node1, node2):\
			root1 = find(node1)\
			root2 = find(node2)\
		\
		if root1 != root2: # Only union if there are in different sets\
			if rank[root1] > rank[root2]:\
				parent[root2] = root1\
			elif rank[root1] < rank[root2]:\
				parent[root1] = root2\
			else:\
				parent[root2] = root1\
				rank[root1] += 1\
		# Step 4: Process edges\
		for a, b in edges:\
			union(a,b)\
		# Step 5: Count unique parents\
		return len(set(find(I) for I in range(n)))\
}